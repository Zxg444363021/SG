package com.globalformulae.shiguang.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.globalformulae.shiguang.bean.Subject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBJECT".
*/
public class SubjectDao extends AbstractDao<Subject, Long> {

    public static final String TABLENAME = "SUBJECT";

    /**
     * Properties of entity Subject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Teacher = new Property(2, String.class, "teacher", false, "TEACHER");
        public final static Property Detail = new Property(3, String.class, "detail", false, "DETAIL");
        public final static Property Day = new Property(4, String.class, "day", false, "DAY");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Credit = new Property(6, String.class, "credit", false, "CREDIT");
        public final static Property Area = new Property(7, String.class, "area", false, "AREA");
        public final static Property Room = new Property(8, String.class, "room", false, "ROOM");
        public final static Property Start = new Property(9, String.class, "start", false, "START");
        public final static Property End = new Property(10, String.class, "end", false, "END");
    }


    public SubjectDao(DaoConfig config) {
        super(config);
    }
    
    public SubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TEACHER\" TEXT," + // 2: teacher
                "\"DETAIL\" TEXT," + // 3: detail
                "\"DAY\" TEXT," + // 4: day
                "\"TYPE\" TEXT," + // 5: type
                "\"CREDIT\" TEXT," + // 6: credit
                "\"AREA\" TEXT," + // 7: area
                "\"ROOM\" TEXT," + // 8: room
                "\"START\" TEXT," + // 9: start
                "\"END\" TEXT);"); // 10: end
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Subject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(3, teacher);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(4, detail);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(5, day);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(7, credit);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(9, room);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(10, start);
        }
 
        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(11, end);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Subject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(3, teacher);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(4, detail);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(5, day);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(7, credit);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(9, room);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(10, start);
        }
 
        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(11, end);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Subject readEntity(Cursor cursor, int offset) {
        Subject entity = new Subject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // teacher
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // day
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // credit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // room
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // start
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // end
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Subject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeacher(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCredit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArea(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoom(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStart(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEnd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Subject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Subject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Subject entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
